name: "Pull Request Gate CI"
on:
  pull_request:
    paths-ignore:
      - '*.md'
      - 'LICENSE'
      - 'monitoring/grafana-dashboard.json'
      - 'screenshots/**'

env:
  NODE_DEFAULT_VERSION: 20
  ANGULAR_CLI_VERSION: 17

jobs:
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v3

  test:
    runs-on: ubuntu-latest
    steps:
      - name: "Check out Git repository"
        uses: actions/checkout@v4
      - name: "Use Node.js"
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_DEFAULT_VERSION }}
      - name: "Install CLI tools"
        run: npm install -g @angular/cli@$ANGULAR_CLI_VERSION
      - name: "Install application"
        run: npm install
      - name: "Execute unit tests"
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          command: npm test

  api-test:
    runs-on: ubuntu-latest
    steps:
      - name: "Check out Git repository"
        uses: actions/checkout@v4
      - name: "Use Node.js"
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_DEFAULT_VERSION }}
      - name: "Install CLI tools"
        run: npm install -g @angular/cli@$ANGULAR_CLI_VERSION
      - name: "Install application"
        run: npm install
      - name: "Execute integration tests"
        uses: nick-invision/retry@v2
        env:
          NODE_ENV: test
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: npm run frisby

  build-and-scan:
    runs-on: ubuntu-latest
    needs: [dependency-review, test, api-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t juice-shop:${{ github.sha }} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: juice-shop:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'   # Fail build on vulnerabilities
          ignore-unfixed: false

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()   # Always upload results even if previous step failed
        with:
          sarif_file: 'trivy-results.sarif'